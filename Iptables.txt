1- Antes de instalar o IPTABLES, é necessário remover o NFTABLES

sudo apt-get remove --auto-remove nftables => para remover o NFTABLES
sudo apt-get purge nftables => remover por completo o NFTABLES 
sudo apt-get install iptables => para instalar o IPTABLES 

Crie um diretório => sudo mkdir -p /etc/iptables
	O parâmetro -p significa que, se algum diretório no caminho já existir, ele não dará erro, e se algum diretório intermediário do caminho não existir, ele será criado automaticamente.
Caminho: cd /etc/iptables => iremos criar o arquivo vi firewall.sh 
sudo chmod +x /etc/iptables/firewall.sh => para que o script tenha permissões adequadas para ser executado

2- Explicação do comando:
    sudo: Executa o comando com privilégios de superusuário (root). Isso é necessário porque você provavelmente não tem permissão de escrever ou alterar arquivos em diretórios de sistema como /etc/iptables/.
    chmod: É o comando usado para alterar as permissões de um arquivo ou diretório no Linux.
    +x: O +x adiciona a permissão de execução ao arquivo, ou seja, torna o arquivo executável. Sem essa permissão, o sistema não permitirá que script seja executado.
    /etc/iptables/firewall.sh: Especifica o caminho do arquivo ao qual você deseja alterar as permissões. No seu caso, o script que contém as regras de firewall.
    
Script firewall.sh
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#!/bin/bash
# Limpar todas as regras pré existentes
sudo iptables -F		# Esse comando limpa todas as regras de todas as cadeias padrão do iptables (INPUT, FORWARD, OUTPUT) e qualquer outra cadeia personalizada que tenha sido criada.
sudo iptables -t nat -F		# Esse comando limpa todas as regras de NAT configuradas na tabela nat do iptables.

# A linha abaixo ativa o módulo de netfilter que evita ataques DoS
echo 1 > /proc/sys/net/ipv4/tcp_syncookies		# Esse comando habilita o recurso de TCP SYN cookies, garantindo que o sistema se proteja contra ataques de SYN flood, ao permitir que as conexões incompletas sejam tratadas de forma mais eficiente e sem consumir tantos recursos.

#Liberar portas dos serviços necessários
sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT		# Esse comando configura o firewall do sistema para permitir conexões SSH na porta 22. Ou seja, ele autoriza que pacotes TCP destinados à porta 22, geralmente utilizada para conexões SSH, possam entrar no sistema.
sudo iptables -A INPUT -p tcp --dport 53 -j ACCEPT		# Esse comando configura uma regra de firewall para permitir conexões TCP na porta 53. A porta 53 é utilizada principalmente para consultas DNS.
sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT		# Esse comando permite o tráfego HTTP (na porta 80) entrar no seu sistema. Ou seja, qualquer pacote TCP destinado à porta 80 será aceito e permitido passar pelo firewall.
sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT		# Esse comando configura o firewall para permitir tráfego HTTPS na porta 443. Em outras palavras, ele autoriza a comunicação segura (criptografada) entre clientes (como navegadores) e o servidor na porta 443.
sudo iptables -A INPUT -p tcp --dport 9090 -j ACCEPT		# Esse comando adiciona uma regra para permitir tráfego TCP na porta 9090, permitindo que os pacotes destinados a essa porta sejam aceitos pelo firewall.
sudo iptables -A INPUT -p tcp --dport 9000 -j ACCEPT		# Esse comando adiciona uma regra para permitir tráfego TCP na porta 9000. A porta 9000 é uma porta de uso genérico que pode ser usada para várias aplicações e serviços.
sudo iptables -A INPUT -p udp --dport 123 -j ACCEPT		# Esse comando configura o firewall para permitir o tráfego UDP na porta 123, o que é necessário para sincronização de tempo usando o NTP. 
sudo iptables -A INPUT -p tcp --dport 21 -j ACCEPT		# Esse comando permite o tráfego TCP na porta 21, que é utilizada pelo protocolo FTP para controle de conexões. Ele garante que você possa se conectar ao servidor FTP para realizar a autenticação, navegação entre diretórios e outros comandos de controle.
sudo iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT		# Esse comando permite que pacotes de entrada relacionados a uma conexão já estabelecida ou relacionada sejam aceitos pelo firewall. Isso é útil para garantir que respostas de serviços de rede, como HTTP ou FTP, possam ser recebidas de volta após uma solicitação ser feita.
sudo iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT		# Esse comando adiciona uma regra para permitir o tráfego encaminhado (não destinado ao sistema, mas que passa por ele entre diferentes redes), que está associado a uma conexão estabelecida ou que é relacionada a uma conexão existente.
sudo iptables -t nat -A POSTROUTING -o eno1 -j MASQUERADE		# Esse comando cria uma regra de NAT de mascaramento (masquerading) que permite que os dispositivos de uma rede interna (ligados a interfaces de rede internas) possam acessar a internet, mascarando seus endereços IP privados com o IP público da interface eno1. A interface eno1 normalmente seria a interface conectada à rede externa (como a internet). Esse tipo de NAT é comumente usado em roteadores ou gateways que compartilham a conexão de internet.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3- Adicionar as regras do Iptables na inicialização após o boot <após a reinicialização do servidor>

Caminho => cd /etc/systemd/system/
Crie o arquivo => sudo vi firewall.service

Arquivo firewall.servive
+++++++++++++++++++++++++++++++++++++++++++
[Unit]
Description=Firewall Script
After=network.target

[Service]
ExecStart=/etc/iptables/firewall.sh
Type=oneshot
RemainAfterExit=true

[Install]
WantedBy=multi-user.target
+++++++++++++++++++++++++++++++++++++++++++

sudo systemctl daemon-reload => para recarregar o systemd
sudo systemctl restart firewall.service => para reiniciar o firewall.service
sudo systemctl enable firewall.service => para habilitar o serviço firewall.service 

4- Explicação do Arquivo firewall.servive

[Unit]
    Description: Esta linha fornece uma descrição do serviço. No seu caso, está definida como "Firewall Script", o que indica que o serviço executa um script de firewall.
    After=network.target: Isso significa que o serviço deve ser iniciado após a configuração da rede. O network.target garante que o serviço só será iniciado quando a rede estiver pronta.
[Service]
    ExecStart=/etc/iptables/firewall.sh: Aqui, você define o comando que o systemd deve executar quando o serviço for iniciado. No seu caso, é o script firewall.sh, localizado em /etc/iptables/.
    Type=oneshot: Isso indica que o serviço executa uma única tarefa (um "one-shot"), ou seja, ele será executado e concluído rapidamente. Após a execução, o serviço será considerado "terminado".
    RemainAfterExit=true: Essa configuração garante que o systemd considere o serviço como "ativo" mesmo depois que o script terminar de ser executado. Isso é útil para serviços que alteram o sistema, como scripts de firewall, e você quer garantir que o status do serviço indique que ele foi executado corretamente.
[Install]
    WantedBy=multi-user.target: Isso indica que o serviço será iniciado automaticamente quando o sistema atingir o "runlevel" multi-user.target, que é equivalente ao modo multiusuário (onde a maioria dos serviços essenciais já está em funcionamento).
